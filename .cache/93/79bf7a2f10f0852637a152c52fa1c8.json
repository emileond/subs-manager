{"id":"node_modules/line-column/lib/line-column.js","dependencies":[{"name":"/Users/emilio_sanchez/Documents/subs-manager/package.json","includedInParent":true,"mtime":1602107881855},{"name":"/Users/emilio_sanchez/Documents/subs-manager/node_modules/line-column/package.json","includedInParent":true,"mtime":1602107881814},{"name":"isarray","loc":{"line":8,"column":23},"parent":"/Users/emilio_sanchez/Documents/subs-manager/node_modules/line-column/lib/line-column.js","resolved":"/Users/emilio_sanchez/Documents/subs-manager/node_modules/isarray/index.js"},{"name":"isobject","loc":{"line":9,"column":23},"parent":"/Users/emilio_sanchez/Documents/subs-manager/node_modules/line-column/lib/line-column.js","resolved":"/Users/emilio_sanchez/Documents/subs-manager/node_modules/isobject/index.js"}],"generated":{"js":"/**\n * line-column - Convert efficiently index to/from line-column in a string\n * @module  lineColumn\n * @license MIT\n */\n\"use strict\";\n\nvar isArray  = require(\"isarray\");\nvar isObject = require(\"isobject\");\nvar slice = Array.prototype.slice;\n\nmodule.exports = LineColumnFinder;\n\n/**\n * Finder for index and line-column from given string.\n *\n * You can call this without `new` operator as it returns an instance anyway.\n *\n * @class\n * @param {string} str - A string to be parsed.\n * @param {Object|number} [options] - Options.\n *     This can be an index in the string for shorthand of `lineColumn(str, index)`.\n * @param {number} [options.origin=1] - The origin value of line and column.\n */\nfunction LineColumnFinder(str, options) {\n  if (!(this instanceof LineColumnFinder)) {\n    if (typeof options === \"number\") {\n      return (new LineColumnFinder(str)).fromIndex(options);\n    }\n    return new LineColumnFinder(str, options);\n  }\n\n  this.str = str || \"\";\n  this.lineToIndex = buildLineToIndex(this.str);\n\n  options = options || {};\n  this.origin = typeof options.origin === \"undefined\" ? 1 : options.origin;\n}\n\n/**\n * Find line and column from index in the string.\n *\n * @param  {number} index - Index in the string. (0-origin)\n * @return {Object|null}\n *     Found line number and column number in object `{ line: X, col: Y }`.\n *     If the given index is out of range, it returns `null`.\n */\nLineColumnFinder.prototype.fromIndex = function (index) {\n  if (index < 0 || index >= this.str.length || isNaN(index)) {\n    return null;\n  }\n\n  var line = findLowerIndexInRangeArray(index, this.lineToIndex);\n  return {\n    line: line + this.origin,\n    col:  index - this.lineToIndex[line] + this.origin\n  };\n}\n\n/**\n * Find index from line and column in the string.\n *\n * @param  {number|Object|Array} line - Line number in the string.\n *     This can be an Object of `{ line: X, col: Y }`, or\n *     an Array of `[line, col]`.\n * @param  {number} [column] - Column number in the string.\n *     This must be omitted or undefined when Object or Array is given\n *     to the first argument.\n * @return {number}\n *     Found index in the string. (always 0-origin)\n *     If the given line or column is out of range, it returns `-1`.\n */\nLineColumnFinder.prototype.toIndex = function (line, column) {\n  if (typeof column === \"undefined\") {\n    if (isArray(line) && line.length >= 2) {\n      return this.toIndex(line[0], line[1]);\n    }\n    if (isObject(line) && \"line\" in line && (\"col\" in line || \"column\" in line)) {\n      return this.toIndex(line.line, (\"col\" in line ? line.col : line.column));\n    }\n    return -1;\n  }\n  if (isNaN(line) || isNaN(column)) {\n    return -1;\n  }\n\n  line -= this.origin;\n  column -= this.origin;\n\n  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {\n    var lineIndex = this.lineToIndex[line];\n    var nextIndex = (\n      line === this.lineToIndex.length - 1\n        ? this.str.length\n        : this.lineToIndex[line + 1]\n    );\n\n    if (column < nextIndex - lineIndex) {\n      return lineIndex + column;\n    }\n  }\n  return -1;\n}\n\n/**\n * Build an array of indexes of each line from a string.\n *\n * @private\n * @param   str {string}  An input string.\n * @return  {number[]}    Built array of indexes. The key is line number.\n */\nfunction buildLineToIndex(str) {\n  var lines = str.split(\"\\n\"),\n      lineToIndex = new Array(lines.length),\n      index = 0;\n\n  for (var i = 0, l = lines.length; i < l; i++) {\n    lineToIndex[i] = index;\n    index += lines[i].length + /* \"\\n\".length */ 1;\n  }\n  return lineToIndex;\n}\n\n/**\n * Find a lower-bound index of a value in a sorted array of ranges.\n *\n * Assume `arr = [0, 5, 10, 15, 20]` and\n * this returns `1` for `value = 7` (5 <= value < 10),\n * and returns `3` for `value = 18` (15 <= value < 20).\n *\n * @private\n * @param  arr   {number[]} An array of values representing ranges.\n * @param  value {number}   A value to be searched.\n * @return {number} Found index. If not found `-1`.\n */\nfunction findLowerIndexInRangeArray(value, arr) {\n  if (value >= arr[arr.length - 1]) {\n    return arr.length - 1;\n  }\n\n  var min = 0, max = arr.length - 2, mid;\n  while (min < max) {\n    mid = min + ((max - min) >> 1);\n\n    if (value < arr[mid]) {\n      max = mid - 1;\n    } else if (value >= arr[mid + 1]) {\n      min = mid + 1;\n    } else { // value >= arr[mid] && value < arr[mid + 1]\n      min = mid;\n      break;\n    }\n  }\n  return min;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/line-column/lib/line-column.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/line-column/lib/line-column.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}}],"sources":{"node_modules/line-column/lib/line-column.js":"/**\n * line-column - Convert efficiently index to/from line-column in a string\n * @module  lineColumn\n * @license MIT\n */\n\"use strict\";\n\nvar isArray  = require(\"isarray\");\nvar isObject = require(\"isobject\");\nvar slice = Array.prototype.slice;\n\nmodule.exports = LineColumnFinder;\n\n/**\n * Finder for index and line-column from given string.\n *\n * You can call this without `new` operator as it returns an instance anyway.\n *\n * @class\n * @param {string} str - A string to be parsed.\n * @param {Object|number} [options] - Options.\n *     This can be an index in the string for shorthand of `lineColumn(str, index)`.\n * @param {number} [options.origin=1] - The origin value of line and column.\n */\nfunction LineColumnFinder(str, options) {\n  if (!(this instanceof LineColumnFinder)) {\n    if (typeof options === \"number\") {\n      return (new LineColumnFinder(str)).fromIndex(options);\n    }\n    return new LineColumnFinder(str, options);\n  }\n\n  this.str = str || \"\";\n  this.lineToIndex = buildLineToIndex(this.str);\n\n  options = options || {};\n  this.origin = typeof options.origin === \"undefined\" ? 1 : options.origin;\n}\n\n/**\n * Find line and column from index in the string.\n *\n * @param  {number} index - Index in the string. (0-origin)\n * @return {Object|null}\n *     Found line number and column number in object `{ line: X, col: Y }`.\n *     If the given index is out of range, it returns `null`.\n */\nLineColumnFinder.prototype.fromIndex = function (index) {\n  if (index < 0 || index >= this.str.length || isNaN(index)) {\n    return null;\n  }\n\n  var line = findLowerIndexInRangeArray(index, this.lineToIndex);\n  return {\n    line: line + this.origin,\n    col:  index - this.lineToIndex[line] + this.origin\n  };\n}\n\n/**\n * Find index from line and column in the string.\n *\n * @param  {number|Object|Array} line - Line number in the string.\n *     This can be an Object of `{ line: X, col: Y }`, or\n *     an Array of `[line, col]`.\n * @param  {number} [column] - Column number in the string.\n *     This must be omitted or undefined when Object or Array is given\n *     to the first argument.\n * @return {number}\n *     Found index in the string. (always 0-origin)\n *     If the given line or column is out of range, it returns `-1`.\n */\nLineColumnFinder.prototype.toIndex = function (line, column) {\n  if (typeof column === \"undefined\") {\n    if (isArray(line) && line.length >= 2) {\n      return this.toIndex(line[0], line[1]);\n    }\n    if (isObject(line) && \"line\" in line && (\"col\" in line || \"column\" in line)) {\n      return this.toIndex(line.line, (\"col\" in line ? line.col : line.column));\n    }\n    return -1;\n  }\n  if (isNaN(line) || isNaN(column)) {\n    return -1;\n  }\n\n  line -= this.origin;\n  column -= this.origin;\n\n  if (line >= 0 && column >= 0 && line < this.lineToIndex.length) {\n    var lineIndex = this.lineToIndex[line];\n    var nextIndex = (\n      line === this.lineToIndex.length - 1\n        ? this.str.length\n        : this.lineToIndex[line + 1]\n    );\n\n    if (column < nextIndex - lineIndex) {\n      return lineIndex + column;\n    }\n  }\n  return -1;\n}\n\n/**\n * Build an array of indexes of each line from a string.\n *\n * @private\n * @param   str {string}  An input string.\n * @return  {number[]}    Built array of indexes. The key is line number.\n */\nfunction buildLineToIndex(str) {\n  var lines = str.split(\"\\n\"),\n      lineToIndex = new Array(lines.length),\n      index = 0;\n\n  for (var i = 0, l = lines.length; i < l; i++) {\n    lineToIndex[i] = index;\n    index += lines[i].length + /* \"\\n\".length */ 1;\n  }\n  return lineToIndex;\n}\n\n/**\n * Find a lower-bound index of a value in a sorted array of ranges.\n *\n * Assume `arr = [0, 5, 10, 15, 20]` and\n * this returns `1` for `value = 7` (5 <= value < 10),\n * and returns `3` for `value = 18` (15 <= value < 20).\n *\n * @private\n * @param  arr   {number[]} An array of values representing ranges.\n * @param  value {number}   A value to be searched.\n * @return {number} Found index. If not found `-1`.\n */\nfunction findLowerIndexInRangeArray(value, arr) {\n  if (value >= arr[arr.length - 1]) {\n    return arr.length - 1;\n  }\n\n  var min = 0, max = arr.length - 2, mid;\n  while (min < max) {\n    mid = min + ((max - min) >> 1);\n\n    if (value < arr[mid]) {\n      max = mid - 1;\n    } else if (value >= arr[mid + 1]) {\n      min = mid + 1;\n    } else { // value >= arr[mid] && value < arr[mid + 1]\n      min = mid;\n      break;\n    }\n  }\n  return min;\n}\n"},"lineCount":156}},"error":null,"hash":"de481a77de27af4152633f9f1132d15d","cacheData":{"env":{}}}